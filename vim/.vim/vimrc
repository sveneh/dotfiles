" .vimrc
" by dukat jul 2003
" vim startup file. Created for version 6.2
" also see .vim/ftplugin

" stuff inserted by installation
source $VIMRUNTIME/vimrc_example.vim

" no vi crap here
set nocompatible


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" editor
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" behave more 'normal', e.g. copy / pasting works
" Note: edit mswin.vim file to enable remapped features like:
"   - CTRL-Y: remapped to Redo instead of Scroll-Up
"if has("win32")
    behave mswin
    source $VIMRUNTIME/mswin.vim
":endif

" formatting for general text files

" Tabs kept at the default indent
set tabstop=8

" TAB/BS moves forward/backward by 4 spaces
set softtabstop=4

" Indenting level to 4 spaces
set shiftwidth=4

" do not use tabs, insert spaces instead
set expandtab

" keep indent after CR
set autoindent

" automatically wrap long lines if they don't fit horizontally
set wrap

" autowrap at whole word boundaries
set linebreak

" visual indicator for wrapped lines
set showbreak=>>\

" Switch on syntax highlighting if it wasn't on yet.
if !exists("syntax_on")
  syntax on
endif

" shows completion values in last line
set wildmenu

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" operations
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" viminfo to store marks, registers, history, etc ...
" - Remember marks for 20 last recent files (')
" - each register up to 50 lines (")
" - save buffer list for no argument startup (%)
" - no search highlithing upon read (h)
" - look for the file in home directory (n)
set viminfo='20,\"50,%,h,n$HOME/.vim/viminfo

" backups in a special directory
function! InitBackupDir()
  if has('win32') || has('win32unix') "windows/cygwin
    let l:separator = '_'
  else
    let l:separator = '.'
  endif
  let l:parent = $HOME . '/' . l:separator . 'vim/'
  let l:backup = l:parent . 'backup/'
  let l:tmp = l:parent . 'tmp/'
  if exists('*mkdir')
    if !isdirectory(l:parent)
      call mkdir(l:parent)
    endif
    if !isdirectory(l:backup)
      call mkdir(l:backup)
    endif
    if !isdirectory(l:tmp)
      call mkdir(l:tmp)
    endif
  endif
  let l:missing_dir = 0
  if isdirectory(l:tmp)
    execute 'set backupdir=' . escape(l:backup, ' ') . '/,.'
    execute 'set undodir='   . escape(l:backup, ' ') . ',.'
  else
    let l:missing_dir = 1
  endif
  if isdirectory(l:backup)
    execute 'set directory=' . escape(l:tmp, ' ') . '/,.'
  else
    let l:missing_dir = 1
  endif
  if l:missing_dir
    echo 'Warning: Unable to create backup directories:' l:backup 'and' l:tmp
    echo 'Try: mkdir -p' l:backup
    echo 'and: mkdir -p' l:tmp
    set backupdir=.
    set directory=.
  endif
endfunction
call InitBackupDir()

" netrw file explorer
" start explorer with a tree view
let g:netrw_liststyle = 3
" preview windows split vertically instead of horizontally
let g:netrw_preview = 1
" reduce explorer window to 30% when a preview is opened
let g:netrw_winsize = 30
" allow netrw to delete directories that are not empty
let g:netrw_localrmdir = 'rm --recursive'



" keep files in memory as hidden buffers after abandoning them
set hidden


" Vundle config
filetype off                  " required

" set the runtime path to include Vundle and initialize
set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim' " let Vundle manage Vundle, required

" general editor plugins
Plugin 'mileszs/ack.vim'                    " ack/ag - the silver searcher
Plugin 'editorconfig/editorconfig-vim'
Plugin 'ShowTrailingWhitespace'             " whitespace santitizing
Plugin 'DeleteTrailingWhitespace'
Plugin 'tpope/vim-fugitive'                 " git
Plugin 'vim-syntastic/syntastic'            " syntax checking

" language-specific plugins
Plugin 'chase/vim-ansible-yaml'
Plugin 'ternjs/tern_for_vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'groovyindent-unix'

" install via cmdline: vim +PluginInstall +qall

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" Plugin settings

" ack/ag
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Compatibility with fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" syntastic checkers need to be available in $PATH, see
" https://github.com/vim-syntastic/syntastic#faqinfo
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_debug = 0 "65 for all
let g:syntastic_java_checkers = ["javac"]
let g:syntastic_java_javac_config_file_enabled = 1
let g:syntastic_javascript_checkers = ["eslint"]

" mappings
" fast .vimrc editing
:nnoremap <leader>ve    :tabedit $MYVIMRC<cr>
:nnoremap <leader>vs    :source  $MYVIMRC<cr>
